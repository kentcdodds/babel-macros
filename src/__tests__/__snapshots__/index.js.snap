// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`macros Supports named imports: Supports named imports 1`] = `

import {css as CSS, styled as STYLED} from './fixtures/emotion.macro'
const red = CSS\`
  background-color: red;
\`

const Div = STYLED.div\`
  composes: \${red}
  color: blue;
\`

      ↓ ↓ ↓ ↓ ↓ ↓

const red = "background-color: red;";
const Div = STYLED.div\`undefined\`;

`;

exports[`macros Works as a JSXElement: Works as a JSXElement 1`] = `

import MyEval from './fixtures/eval.macro'
const x = <MyEval>34 + 45</MyEval>

      ↓ ↓ ↓ ↓ ↓ ↓

const x = 79;

`;

exports[`macros appends the npm URL for errors thrown by node modules with a slash: appends the npm URL for errors thrown by node modules with a slash 1`] = `

import errorThrower from 'babel-plugin-macros-test-error-thrower/macro'
errorThrower('hi')

      ↓ ↓ ↓ ↓ ↓ ↓

Error: babel-plugin-macros-test-error-thrower/macro: not helpful Learn more: https://www.npmjs.com/package/babel-plugin-macros-test-error-thrower

`;

exports[`macros appends the npm URL for errors thrown by node modules: appends the npm URL for errors thrown by node modules 1`] = `

import errorThrower from 'babel-plugin-macros-test-error-thrower.macro'
errorThrower('hi')

      ↓ ↓ ↓ ↓ ↓ ↓

Error: babel-plugin-macros-test-error-thrower.macro: not helpful Learn more: https://www.npmjs.com/package/babel-plugin-macros-test-error-thrower.macro

`;

exports[`macros does nothing but remove macros if it is unused: does nothing but remove macros if it is unused 1`] = `

import foo from './some-macros-that-doesnt-even-need-to-exist.macro'
export default 'something else'

      ↓ ↓ ↓ ↓ ↓ ↓

export default 'something else';

`;

exports[`macros forwards MacroErrors thrown by the macro: forwards MacroErrors thrown by the macro 1`] = `

import errorThrower from './fixtures/macro-error-thrower.macro'
errorThrower('hey')

      ↓ ↓ ↓ ↓ ↓ ↓

MacroError: very helpful

`;

exports[`macros macros can set their configName and get their config: macros can set their configName and get their config 1`] = `

import configured from './configurable.macro'

configured\`stuff\`

      ↓ ↓ ↓ ↓ ↓ ↓

configured\`stuff\`;

`;

exports[`macros prepends the relative path for errors thrown by the macro: prepends the relative path for errors thrown by the macro 1`] = `

import errorThrower from './fixtures/error-thrower.macro'
errorThrower('hey')

      ↓ ↓ ↓ ↓ ↓ ↓

Error: ./fixtures/error-thrower.macro: very unhelpful

`;

exports[`macros supports compiled macros (\`__esModule\` + \`export default\`): supports compiled macros (\`__esModule\` + \`export default\`) 1`] = `

import {css, styled} from './fixtures/emotion-esm.macro'
const red = css\`
  background-color: red;
\`

const Div = styled.div\`
  composes: \${red}
  color: blue;
\`

      ↓ ↓ ↓ ↓ ↓ ↓

const red = css\`
  background-color: red;
\`;
const Div = styled.div\`
  composes: \${red}
  color: blue;
\`;

`;

exports[`macros supports macros from node_modules: supports macros from node_modules 1`] = `

import fakeMacro from 'babel-plugin-macros-test-fake/macro'
fakeMacro('hi')

      ↓ ↓ ↓ ↓ ↓ ↓

fakeMacro('hi');

`;

exports[`macros throws an error if the macro is not properly wrapped: throws an error if the macro is not properly wrapped 1`] = `

import unwrapped from './fixtures/non-wrapped.macro'
unwrapped('hey')

      ↓ ↓ ↓ ↓ ↓ ↓

Error: The macro imported from "./fixtures/non-wrapped.macro" must be wrapped in "createMacro" which you can get from "babel-plugin-macros". Please refer to the documentation to see how to do this properly: https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md#writing-a-macro

`;

exports[`macros when a plugin that replaces paths is used, macros still work properly: when a plugin that replaces paths is used, macros still work properly 1`] = `

import myEval from '../eval.macro'

const result = myEval\`+('4' + '2')\`

global.result = result

      ↓ ↓ ↓ ↓ ↓ ↓

const result = ("foobar", 42);
global.result = result;

`;

exports[`macros when there is an error reading the config, a helpful message is logged 1`] = `
Array [
  There was an error trying to load the config "configurableMacro" for the macro imported from "./configurable.macro. Please see the error thrown for more information.,
]
`;

exports[`macros when there is an error reading the config, a helpful message is logged: when there is an error reading the config, a helpful message is logged 1`] = `

import configured from './configurable.macro'

configured\`stuff\`

      ↓ ↓ ↓ ↓ ↓ ↓

Error: this is a cosmiconfig error

`;

exports[`macros when there is no config to load, then no config is passed: when there is no config to load, then no config is passed 1`] = `

import configured from './configurable.macro'

configured\`stuff\`

      ↓ ↓ ↓ ↓ ↓ ↓

configured\`stuff\`;

`;

exports[`macros works with function calls: works with function calls 1`] = `

import myEval from './fixtures/eval.macro'
const x = myEval('34 + 45')

      ↓ ↓ ↓ ↓ ↓ ↓

const x = 79;

`;

exports[`macros works with import: works with import 1`] = `

import myEval from './fixtures/eval.macro'
const x = myEval\`34 + 45\`

      ↓ ↓ ↓ ↓ ↓ ↓

const x = 79;

`;

exports[`macros works with require destructuring and aliasing: works with require destructuring and aliasing 1`] = `

const {css: CSS, styled: STYLED} = require('./fixtures/emotion.macro')
const red = CSS\`
  background-color: red;
\`

const Div = STYLED.div\`
  composes: \${red}
  color: blue;
\`

      ↓ ↓ ↓ ↓ ↓ ↓

const red = "background-color: red;";
const Div = STYLED.div\`undefined\`;

`;

exports[`macros works with require destructuring: works with require destructuring 1`] = `

const {css, styled} = require('./fixtures/emotion.macro')
const red = css\`
  background-color: red;
\`

const Div = styled.div\`
  composes: \${red}
  color: blue;
\`

      ↓ ↓ ↓ ↓ ↓ ↓

const red = "background-color: red;";
const Div = styled.div\`undefined\`;

`;

exports[`macros works with require: works with require 1`] = `

const evaler = require('./fixtures/eval.macro')
const x = evaler\`34 + 45\`

      ↓ ↓ ↓ ↓ ↓ ↓

const x = 79;

`;
